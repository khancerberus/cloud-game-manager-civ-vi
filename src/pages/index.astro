---
import Layout from '../layouts/Layout.astro'
import Table from '../components/Table.astro'
import { GET } from './api/game'
import Game from '@/components/Game.astro'
import type { IGame } from '@/types/game'

const response = await GET(Astro)
const games: IGame[] = await response.json()
---

<Layout title="Welcome to Astro.">
    <main class="flex flex-col justify-center items-center px-5 gap-5">
        <header class="flex flex-col justify-center items-center p-5">
            <h1 class="font-bold">Cloud Game Manager</h1>
            <h2 class="font-bold text-gradient">Civilizations VI</h2>
        </header>

        <section class="flex flex-col min-w-[40rem]">
            <h4 class="px-4 py-2">Juegos Activos</h4>
            <div class="flex flex-col gap-2">
                {games.find(game => game.finished) && (
                    <article class="flex items-center w-full bg-slate-800 border-slate-700 py-2 px-4 justify-between border">
                        <div>
                            <h4 class="text-[#9d95d3]">No hay juegos activos</h4>
                        </div>
                    </article>
                )}
                {games.filter(game => !game.finished).map(game => (
                    <Game game={game} />
                ))}
            </div>
        </section>

        <section class="flex flex-col min-w-[40rem]">
            <h4 class="px-4 py-2">Juegos Finalizados</h4>
            <div>
                {games.find(game => !game.finished) && (
                    <article class="flex items-center w-full bg-slate-800 border-slate-700 py-2 px-4 justify-between border">
                        <div>
                            <h4 class="text-[#9d95d3]">No hay juegos finalizados</h4>
                        </div>
                    </article>
                )}
                {games.filter(game => game.finished).map(game => (
                    <Game game={game} />
                ))}
            </div>
        </section>
    </main>
</Layout>

<style>
    .astro-a {
        position: absolute;
        top: -32px;
        left: 50%;
        transform: translatex(-50%);
        width: 220px;
        height: auto;
        z-index: -1;
    }
    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
    .instructions {
        margin-bottom: 2rem;
        border: 1px solid rgba(var(--accent-light), 25%);
        background: linear-gradient(
            rgba(var(--accent-dark), 66%),
            rgba(var(--accent-dark), 33%)
        );
        padding: 1.5rem;
        border-radius: 8px;
    }
    .instructions code {
        font-size: 0.8em;
        font-weight: bold;
        background: rgba(var(--accent-light), 12%);
        color: rgb(var(--accent-light));
        border-radius: 4px;
        padding: 0.3em 0.4em;
    }
    .instructions strong {
        color: rgb(var(--accent-light));
    }
    .link-card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
        gap: 2rem;
        padding: 0;
    }
</style>
